% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/CatchCurveCum.R
\name{CatchCurveCum}
\alias{CatchCurveCum}
\title{Cumulative catch curve (The Jones and van Zalinge method)}
\usage{
CatchCurveCum(classes, cumCatch, datatype, Linf = NULL, K = NULL, t0 = 0)
}
\arguments{
\item{cumCatch}{Cumulative catch per sampling time as matrix or the total cumulative catch as vector.}

\item{datatype}{Type of data which is used for analysis, either 'length' or 'age', for length frequency or age composition data, respectively}

\item{Linf}{Infinite length for investigated species in cm [cm].}

\item{K}{Growth coefficient for investigated species per year [1/year].}

\item{t0}{Theoretical time zero, at which individuals of this species hatch (default = 0).}

\item{midLengths}{Midpoints of the size class intervals as vector}
}
\description{
This is a function to calculate the total mortality (Z) from length composition data via the length converted cumulative catch curve or from age composition data via the cumulative catch curve.
}
\details{
Not good for methods where the largest length groups are not represented fully (highly selective gear). The length converted linearised cumulative catch curve is used to calculate the total mortality (Z). This function includes a so called locator function, which asks you to choose points from a graph manually. Based on these points the regression line is calculated.
}
\examples{
\donttest{

# Cumulative catch curve based on length frequency data
# load data
 data(ex.LengthCC)

# calculate cumulative catch
 cumulativeCatch <- rev(cumsum(rev(ex.LengthCC[,2])))

# run model
 output <- CatchCurveCum(classes = ex.LengthCC[,1],
   cumCatch = cumulativeCatch, datatype = "length", Linf = 23.1, K = 0.59)

# investigate results
 output

# based on age composition data
# calculate cumulative catch
cumulativeCatch <- rev(cumsum(rev(c(488,612,601,237,62.3,15.7,4.7,1.4))))

# run model
output <- CatchCurveCum(classes = c(0,1,2,3,4,5,6,7), cumulativeCatch,
   datatype = 'age')

# investigate results
output

}

}

